[{"C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\index.js":"1","C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\App.js":"2","C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\Navbar.js":"3","C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\Home.js":"4","C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\Create.js":"5","C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\BlogDetails.js":"6","C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\NotFound.js":"7","C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\BlogList.js":"8","C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\useFetch.js":"9"},{"size":447,"mtime":1699278848092,"results":"10","hashOfConfig":"11"},{"size":832,"mtime":1699278848077,"results":"12","hashOfConfig":"11"},{"size":430,"mtime":1699278848077,"results":"13","hashOfConfig":"11"},{"size":484,"mtime":1699285274666,"results":"14","hashOfConfig":"11"},{"size":1408,"mtime":1700465248581,"results":"15","hashOfConfig":"11"},{"size":1196,"mtime":1699285150132,"results":"16","hashOfConfig":"11"},{"size":275,"mtime":1699278848077,"results":"17","hashOfConfig":"11"},{"size":430,"mtime":1699284013661,"results":"18","hashOfConfig":"11"},{"size":1134,"mtime":1699283315042,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ld98rc",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\index.js",[],["40","41"],"C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\App.js",[],"C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\Navbar.js",[],"C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\Home.js",["42"],"import BlogList from \"./BlogList\";\r\nimport useFetch from \"./useFetch\";\r\n\r\nconst Home = () => {\r\n  const { error, isPending, data: blogs } = useFetch('http://localhost:5000/blogs')\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      { error && <div>{ error }</div> }\r\n      { isPending && <div>Loading...</div> }\r\n      { blogs && blogs.length > 0 && <BlogList blogs={blogs} /> }\r\n      {blogs && blogs.length == 0 && <p>No blog found</p>} \r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Home;\r\n","C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\Create.js",[],"C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\BlogDetails.js",[],"C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\NotFound.js",[],"C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\BlogList.js",[],"C:\\Users\\devan\\Desktop\\Blogify\\frontend\\src\\useFetch.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":12,"column":30,"nodeType":"49","messageId":"50","endLine":12,"endColumn":32},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]